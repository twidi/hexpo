"""Tests for the grid package."""

import numpy as np
import pytest

from hexpo_game.core.grid import Color, ConcreteGrid, ConcreteTile, Grid, Point, Tile


def assert_points_equal(point1: Point, point2: Point) -> None:
    """Assert that two points are equal."""
    __tracebackhide__ = True  # pylint: disable=unused-variable
    assert point1.x == pytest.approx(point2.x)
    assert point1.y == pytest.approx(point2.y)


def test_grid() -> None:
    """Test the grid."""
    grid = Grid(3, 4)
    assert grid.nb_cols == 3
    assert grid.nb_rows == 4
    assert grid.tiles == (
        (Tile(0, 0), Tile(1, 0), Tile(2, 0)),
        (Tile(0, 1), Tile(1, 1), Tile(2, 1)),
        (Tile(0, 2), Tile(1, 2), Tile(2, 2)),
        (Tile(0, 3), Tile(1, 3), Tile(2, 3)),
    )


def test_tile_neighbors() -> None:
    """Test the neighbors of tiles."""
    grid = Grid(3, 3)
    assert grid.neighbors[Tile(0, 0)] == (Tile(1, 0), Tile(0, 1))
    assert grid.neighbors[Tile(1, 0)] == (Tile(2, 0), Tile(2, 1), Tile(1, 1), Tile(0, 1), Tile(0, 0))
    assert grid.neighbors[Tile(2, 0)] == (Tile(2, 1), Tile(1, 0))
    assert grid.neighbors[Tile(0, 1)] == (Tile(0, 0), Tile(1, 0), Tile(1, 1), Tile(0, 2))
    assert grid.neighbors[Tile(1, 1)] == (Tile(1, 0), Tile(2, 1), Tile(2, 2), Tile(1, 2), Tile(0, 2), Tile(0, 1))
    assert grid.neighbors[Tile(2, 1)] == (Tile(2, 0), Tile(2, 2), Tile(1, 1), Tile(1, 0))
    assert grid.neighbors[Tile(0, 2)] == (Tile(0, 1), Tile(1, 1), Tile(1, 2))
    assert grid.neighbors[Tile(1, 2)] == (Tile(1, 1), Tile(2, 2), Tile(0, 2))
    assert grid.neighbors[Tile(2, 2)] == (Tile(2, 1), Tile(1, 2), Tile(1, 1))


def test_point_add() -> None:
    """Test the addition of points."""
    point1 = Point(1.0, 2.0)
    point2 = Point(3.0, 4.0)
    assert_points_equal(point1 + point2, Point(4.0, 6.0))
    with pytest.raises(TypeError):
        point1 + 1.0  # pylint: disable=pointless-statement


def test_concrete_grid() -> None:
    """Test the concrete grid."""
    grid = ConcreteGrid(Grid(3, 3), 2.0)
    assert grid.tile_size == 2.0
    assert grid.tile_width == 4.0
    assert grid.tile_height == pytest.approx(3.4641016151377544)
    tiles = list(grid)
    assert len(tiles) == 9
    assert tiles[0].tile == Tile(0, 0)
    assert isinstance(tiles[0], ConcreteTile)
    assert_points_equal(tiles[0].center, Point(2, 1.7320508075688772))
    # we only test coordinates for the first two point, we assume it's ok for the others
    assert_points_equal(tiles[0].points[0], Point(3, 0))
    assert_points_equal(tiles[0].points[1], Point(4, 1.7320508075688772))
    assert_points_equal(tiles[0].points[2], Point(3, 3.4641016151377544))
    assert_points_equal(tiles[0].points[3], Point(1, 3.4641016151377544))
    assert_points_equal(tiles[0].points[4], Point(0, 1.7320508075688772))
    assert_points_equal(tiles[0].points[5], Point(1, 0))
    np.testing.assert_equal(tiles[0].points_array, np.array([[3, 0], [4, 2], [3, 3], [1, 3], [0, 2], [1, 0]]))
    assert tiles[1].tile == Tile(1, 0)
    assert_points_equal(tiles[1].center, Point(5, 3.4641016151377544))
    assert tiles[2].tile == Tile(2, 0)
    assert_points_equal(tiles[2].center, Point(8, 1.7320508075688772))
    assert tiles[3].tile == Tile(0, 1)
    assert_points_equal(tiles[3].center, Point(2, 5.196152422706632))
    assert tiles[4].tile == Tile(1, 1)
    assert_points_equal(tiles[4].center, Point(5, 6.928203230275509))
    assert tiles[5].tile == Tile(2, 1)
    assert_points_equal(tiles[5].center, Point(8, 5.196152422706632))
    assert tiles[6].tile == Tile(0, 2)
    assert_points_equal(tiles[6].center, Point(2, 8.660254037844387))
    assert tiles[7].tile == Tile(1, 2)
    assert_points_equal(tiles[7].center, Point(5, 10.392304845413264))
    assert tiles[8].tile == Tile(2, 2)
    assert_points_equal(tiles[8].center, Point(8, 8.660254037844387))


def test_max_coordinates():
    """Test the max coordinates."""
    grid = ConcreteGrid(Grid(3, 4), 2.0)
    assert_points_equal(grid.max_coordinates, Point(10, 15.588457268119894))
    grid = ConcreteGrid(Grid(3, 4), 20.0)
    assert_points_equal(grid.max_coordinates, Point(100, 155.88457268119894))


def test_create_map():
    """Test the creation of a map."""
    grid = ConcreteGrid(Grid(3, 4), 2.0)
    np.testing.assert_equal(grid.map, np.zeros((17, 11, 3), dtype=np.int32))
    grid = ConcreteGrid(Grid(3, 4), 20.0)
    np.testing.assert_equal(grid.map, np.zeros((157, 101, 3), dtype=np.int32))


def test_reset_map():
    """Test the reset of a map."""
    grid = ConcreteGrid(Grid(3, 4), 2.0)
    grid.map.fill(1)
    grid.reset_map()
    np.testing.assert_equal(grid.map, np.zeros((17, 11, 3), dtype=np.int32))


def test_fill_no_tiles():
    """Test the fill of a map with no tiles."""
    grid = ConcreteGrid(Grid(3, 4), 2.0)
    grid.reset_map()
    grid.fill_tiles([], Color(240, 120, 60).as_bgr())
    np.testing.assert_equal(grid.map, np.zeros((17, 11, 3), dtype=np.int32))


def test_fill_one_tile():
    """Test the fill of a map with one tile."""
    grid = ConcreteGrid(Grid(3, 4), 5.0)
    grid.reset_map()
    grid.fill_tiles([Tile(2, 3)], Color(240, 120, 60).as_bgr())
    # first we test the area where the data is filled, then we reset this area to zero and check that everything is zero
    # pylint: disable=line-too-long
    # fmt: off
    assert grid.map[25:37, 14:26].tolist() == [
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [6, 12, 24], [12, 24, 48], [13, 25, 49], [13, 25, 49], [6, 13, 25], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 29], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 16, 35], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [6, 11, 22], [56, 112, 225], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 112, 225], [6, 11, 22], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [47, 95, 189], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [47, 95, 189], [0, 0, 0]],
        [[0, 0, 0], [31, 61, 123], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [31, 61, 123]],
        [[14, 28, 54], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240]],
        [[0, 2, 4], [39, 78, 156], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [39, 78, 157]],
        [[0, 0, 0], [7, 14, 27], [56, 113, 226], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 113, 226], [7, 14, 27]],
        [[0, 0, 0], [0, 0, 0], [28, 54, 109], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [28, 54, 109], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [2, 6, 11], [51, 103, 206], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [51, 103, 206], [2, 6, 11], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [8, 16, 33], [51, 102, 204], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 16, 35], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 29], [13, 30, 57], [13, 28, 55], [13, 29, 58], [7, 14, 31], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
    ]
    # fmt: on
    # pylint: enable=line-too-long
    grid.map[25:37, 14:26] = 0
    np.testing.assert_equal(grid.map, np.zeros((40, 26, 3), dtype=np.int32))


def test_fill_many_tiles():
    """Test the fill of a map with four tiles."""
    grid = ConcreteGrid(Grid(3, 4), 5.0)
    grid.reset_map()
    grid.fill_tiles([Tile(1, 2), Tile(2, 2), Tile(1, 3), Tile(2, 3)], Color(240, 120, 60).as_bgr())
    # first we test the area where the data is filled, then we reset this area to zero and check that everything is zero
    # pylint: disable=line-too-long
    # fmt: off
    assert grid.map[16:40, 7:26].tolist() == [
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [6, 12, 24], [12, 24, 48], [13, 25, 49], [13, 25, 49], [6, 13, 25], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 27], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 15, 33], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [2, 6, 11], [51, 102, 203], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [51, 102, 203], [2, 6, 11], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [28, 54, 109], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [28, 54, 109], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 27], [56, 113, 226], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 113, 226], [7, 14, 27]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [6, 12, 24], [12, 24, 48], [13, 25, 49], [13, 25, 49], [13, 25, 49], [42, 84, 167], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [40, 79, 159]],
        [[0, 0, 0], [0, 0, 0], [7, 14, 27], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240]],
        [[0, 0, 0], [0, 0, 0], [43, 87, 173], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [32, 65, 131]],
        [[0, 0, 0], [13, 28, 55], [57, 114, 228], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [49, 98, 197], [2, 4, 8]],
        [[0, 0, 0], [44, 88, 176], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [57, 115, 229], [6, 13, 25], [0, 0, 0]],
        [[13, 27, 52], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [16, 32, 67], [0, 0, 0], [0, 0, 0]],
        [[2, 2, 8], [45, 90, 181], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 112, 225], [6, 11, 22], [0, 0, 0]],
        [[0, 0, 0], [15, 30, 61], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [47, 95, 189], [0, 0, 0]],
        [[0, 0, 0], [2, 2, 6], [46, 91, 183], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [31, 61, 123]],
        [[0, 0, 0], [0, 0, 0], [14, 27, 55], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240]],
        [[0, 0, 0], [0, 0, 0], [37, 73, 147], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [39, 78, 157]],
        [[0, 0, 0], [6, 13, 25], [55, 109, 218], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 113, 226], [7, 14, 27]],
        [[0, 0, 0], [26, 51, 102], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [28, 54, 109], [0, 0, 0]],
        [[2, 6, 11], [49, 98, 197], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [51, 103, 206], [2, 6, 11], [0, 0, 0]],
        [[13, 26, 51], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 16, 35], [0, 0, 0], [0, 0, 0]],
        [[2, 2, 8], [45, 90, 181], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [36, 71, 143], [13, 31, 60], [13, 28, 55], [13, 29, 58], [7, 14, 31], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [15, 30, 61], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [49, 98, 197], [2, 4, 8], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [2, 2, 6], [46, 91, 183], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [57, 115, 229], [6, 13, 25], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [8, 16, 33], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [9, 18, 38], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
    ]
    # fmt: on
    # pylint: enable=line-too-long
    grid.map[16:40, 7:26] = 0
    np.testing.assert_equal(grid.map, np.zeros((40, 26, 3), dtype=np.int32))


def test_fill_many_areas():
    """Test many fills of a map"""
    grid = ConcreteGrid(Grid(3, 4), 5.0)
    grid.reset_map()
    grid.fill_tiles([Tile(0, 1)], Color(60, 240, 120).as_bgr())
    grid.fill_tiles([Tile(2, 3)], Color(240, 120, 60).as_bgr())
    # first we test the area where the data is filled, then we reset this area to zero and check that everything is zero
    # pylint: disable=line-too-long
    # fmt: off
    assert grid.map[8:19, 0:12].tolist() == [
        [[0, 0, 0], [0, 0, 0], [12, 24, 6], [24, 48, 12], [25, 49, 13], [25, 49, 13], [25, 49, 13], [25, 49, 13], [13, 25, 6], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [14, 27, 7], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [15, 33, 8], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [87, 173, 43], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [87, 173, 43], [0, 0, 0], [0, 0, 0]],
        [[28, 55, 13], [114, 228, 57], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [28, 55, 13], [0, 0, 0]],
        [[88, 176, 44], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [88, 176, 44], [0, 0, 0]],
        [[120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [28, 56, 14]],
        [[90, 181, 45], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [90, 181, 45], [2, 8, 2]],
        [[30, 61, 15], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [30, 61, 15], [0, 0, 0]],
        [[2, 6, 2], [91, 183, 46], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [91, 183, 46], [2, 6, 2], [0, 0, 0]],
        [[0, 0, 0], [16, 33, 8], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [120, 240, 60], [16, 35, 8], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [14, 29, 7], [28, 57, 13], [28, 55, 13], [28, 55, 13], [28, 55, 13], [28, 56, 13], [14, 31, 7], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
    ]
    assert grid.map[25:37, 14:26].tolist() == [
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [6, 12, 24], [12, 24, 48], [13, 25, 49], [13, 25, 49], [6, 13, 25], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 29], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 16, 35], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [6, 11, 22], [56, 112, 225], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 112, 225], [6, 11, 22], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [47, 95, 189], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [47, 95, 189], [0, 0, 0]],
        [[0, 0, 0], [31, 61, 123], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [31, 61, 123]],
        [[14, 28, 54], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240]],
        [[0, 2, 4], [39, 78, 156], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [39, 78, 157]],
        [[0, 0, 0], [7, 14, 27], [56, 113, 226], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [56, 113, 226], [7, 14, 27]],
        [[0, 0, 0], [0, 0, 0], [28, 54, 109], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [28, 54, 109], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [2, 6, 11], [51, 103, 206], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [51, 103, 206], [2, 6, 11], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [8, 16, 33], [51, 102, 204], [60, 120, 240], [60, 120, 240], [60, 120, 240], [60, 120, 240], [8, 16, 35], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [7, 14, 29], [13, 30, 57], [13, 28, 55], [13, 29, 58], [7, 14, 31], [0, 0, 0], [0, 0, 0], [0, 0, 0]],
    ]
    # fmt: on
    # pylint: enable=line-too-long
    grid.map[8:19, 0:12] = 0
    grid.map[25:37, 14:26] = 0
    np.testing.assert_equal(grid.map, np.zeros((40, 26, 3), dtype=np.int32))
