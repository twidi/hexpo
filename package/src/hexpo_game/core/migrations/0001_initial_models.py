# Generated by Django 4.1.3 on 2022-11-12 19:52

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("started_at", models.DateTimeField(auto_now_add=True, help_text="When the game started.")),
                ("ended_at", models.DateTimeField(blank=True, help_text="When the game ended.", null=True)),
                ("grid_nb_cols", models.PositiveIntegerField(help_text="Number of columns in the grid.")),
                ("grid_nb_rows", models.PositiveIntegerField(help_text="Number of rows in the grid.")),
                ("max_players_allowed", models.PositiveIntegerField(help_text="Maximum number of players allowed.")),
                ("current_turn", models.PositiveIntegerField(default=0, help_text="Current turn number.")),
                ("current_turn_started_at", models.DateTimeField(help_text="When the current turn started.")),
                ("current_turn_end", models.DateTimeField(help_text="When the current turn ends.")),
            ],
        ),
        migrations.CreateModel(
            name="Player",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "external_id",
                    models.CharField(
                        help_text="External ID of the player (like a Twitch id).", max_length=255, unique=True
                    ),
                ),
                ("name", models.CharField(help_text="Name of the player.", max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="RandomEvent",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("turn", models.PositiveIntegerField(help_text="Turn number when the event happened.")),
                (
                    "turn_moment",
                    models.CharField(
                        choices=[
                            ("before", "Before executions of actions"),
                            ("after", "After executions of actions"),
                        ],
                        help_text="Moment of the turn when the event happened.",
                        max_length=255,
                    ),
                ),
                ("event_type", models.CharField(help_text="Type of the event.", max_length=255)),
                (
                    "tile_coord_q",
                    models.IntegerField(
                        help_text="The q coordinate of the event in the axial coordinate system.", null=True
                    ),
                ),
                (
                    "tile_coord_r",
                    models.IntegerField(
                        help_text="The r coordinate of the event in the axial coordinate system.", null=True
                    ),
                ),
                ("confirmed_at", models.DateTimeField(help_text="When the event was confirmed.", null=True)),
                ("lightning_damage", models.PositiveIntegerField(help_text="Damage of the lightning.", null=True)),
                ("earthquake_damage", models.PositiveIntegerField(help_text="Damage of the earthquake.", null=True)),
                ("earthquake_radius", models.PositiveIntegerField(help_text="Radius of the earthquake.", null=True)),
                (
                    "drop_coins_amount",
                    models.PositiveIntegerField(help_text="Amount of coins in the drop.", null=True),
                ),
                (
                    "game",
                    models.ForeignKey(
                        help_text="Game the event is in.", on_delete=django.db.models.deletion.CASCADE, to="core.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="PlayerInGame",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("started_turn", models.PositiveIntegerField(help_text="Turn number when the player started.")),
                (
                    "ended_turn",
                    models.PositiveIntegerField(
                        blank=True, help_text="Turn number when the player ended.", null=True
                    ),
                ),
                ("color", models.CharField(help_text="Color of the player.", max_length=7)),
                (
                    "start_tile_coord_q",
                    models.IntegerField(
                        help_text="The q coordinate of the start tile in the axial coordinate system."
                    ),
                ),
                (
                    "start_tile_coord_r",
                    models.IntegerField(
                        help_text="The r coordinate of the start tile in the axial coordinate system."
                    ),
                ),
                ("level", models.PositiveIntegerField(default=1, help_text="Current level of the player.")),
                ("coins", models.PositiveIntegerField(default=0, help_text="Current number of coins of the player.")),
                ("is_alive", models.BooleanField(default=True, help_text="Whether the player is alive or not.")),
                (
                    "game",
                    models.ForeignKey(
                        help_text="Game the player is in.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.game",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        help_text="Player in the game.", on_delete=django.db.models.deletion.CASCADE, to="core.player"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="player",
            name="games",
            field=models.ManyToManyField(through="core.PlayerInGame", to="core.game"),
        ),
        migrations.CreateModel(
            name="OccupiedTile",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "coord_q",
                    models.IntegerField(help_text="The q coordinate of the tile in the axial coordinate system."),
                ),
                (
                    "coord_r",
                    models.IntegerField(help_text="The r coordinate of the tile in the axial coordinate system."),
                ),
                (
                    "level",
                    models.PositiveSmallIntegerField(
                        default=20, help_text="Current level of the tile. Max 100. Destroyed at 0."
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        help_text="Game the tile is in.", on_delete=django.db.models.deletion.CASCADE, to="core.game"
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        help_text="Player that occupies the tile.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.player",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Drop",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "tile_coord_q",
                    models.IntegerField(help_text="The q coordinate of the drop in the axial coordinate system."),
                ),
                (
                    "tile_coord_r",
                    models.IntegerField(help_text="The r coordinate of the drop in the axial coordinate system."),
                ),
                ("coins", models.PositiveIntegerField(help_text="Number of coins in the drop.")),
                (
                    "game",
                    models.ForeignKey(
                        help_text="Game the drop is in.", on_delete=django.db.models.deletion.CASCADE, to="core.game"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Action",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("turn", models.PositiveIntegerField(help_text="Turn number when the action was done.")),
                (
                    "action_type",
                    models.CharField(
                        choices=[("attack", "Attack"), ("defend", "Defend"), ("grow", "Grow"), ("bank", "Bank")],
                        help_text="Type of the action.",
                        max_length=255,
                    ),
                ),
                (
                    "tile_coord_q",
                    models.IntegerField(
                        help_text="The q coordinate of the action in the axial coordinate system.", null=True
                    ),
                ),
                (
                    "tile_coord_r",
                    models.IntegerField(
                        help_text="The r coordinate of the action in the axial coordinate system.", null=True
                    ),
                ),
                ("confirmed_at", models.DateTimeField(help_text="When the action was confirmed.", null=True)),
                (
                    "efficiency",
                    models.FloatField(default=1.0, help_text="Efficiency of the action. (between 0 and 1)"),
                ),
                (
                    "game",
                    models.ForeignKey(
                        help_text="Game the action is in.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.game",
                    ),
                ),
                (
                    "player",
                    models.ForeignKey(
                        help_text="Player that did the action.",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.player",
                    ),
                ),
            ],
        ),
    ]
